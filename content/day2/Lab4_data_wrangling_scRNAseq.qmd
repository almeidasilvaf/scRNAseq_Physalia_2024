# Lab 4 - Single-cell RNA-seq data wrangling

::: {.callout-note icon='true'}

## Notes

The estimated time for this lab is around 1h30.

:::

::: {.callout-tip icon='true'}

## Aims

- Perform basic quality control on single-cell RNA-seq data
- Filter cells and features in single-cell RNA-seq data
- Compute and store new information in a `SingleCellExperiment` object
- Check housekeeping genes and gene set expression in single-cell RNA-seq data
- Plot embeddings of single-cell RNA-seq data

:::

```{r eval = TRUE, echo = FALSE, warning = FALSE, error = FALSE, comment = FALSE, message = FALSE}
knitr::opts_chunk$set(eval = FALSE)
```

## Introduction

Data produced in a single cell RNA-seq experiment has several interesting characteristics that make it distinct from data produced in a bulk population RNA-seq experiment. 

Two characteristics that are important to keep in mind when working with scRNA-Seq are drop-out (the excessive amount of zeros due to limiting mRNA) and the potential for quality control (QC) metrics to be confounded with biology. This combined with the ability to measure heterogeniety from cells in samples has shifted the field away from the typical analysis in population-based RNA-Seq. 

Here we demonstrate some approaches to quality control, followed by identifying and analyzing cell subsets.

### Load necessary packages

When loading libraries, we are asking R to load code for us written by someone else. It is a convenient way to leverage and reproduce methodology developed by others.

::: {.callout-question .icon .callout-note}

Following the previous labs, load the necessary libraries for this analysis.

::: {.callout-answer .icon .callout-note collapse=true}

```{r, eval = TRUE, filename = "R"}
library(tidyverse)
library(SingleCellExperiment)
```

:::

:::


### Read in Pancreas counts matrix.

For this tutorial, we will be analyzing a human pancreas scRNAseq dataset. 
It is freely available from [GEO: link](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE114802). 
We start by downloading the cell, features and counts matrix. 

::: {.callout-question .icon .callout-note}

Inspect the GEO page and get the downloadable links for each file

::: {.callout-answer .icon .callout-note collapse=true}

```{r, eval = FALSE, filename = "R"}
download.file('https://ftp.ncbi.nlm.nih.gov/geo/series/GSE114nnn/GSE114802/suppl/GSE114802_org4_barcodes.tsv.gz', 'GSE114802_org4_barcodes.tsv.gz')
download.file('https://ftp.ncbi.nlm.nih.gov/geo/series/GSE114nnn/GSE114802/suppl/GSE114802_org4_genes.tsv.gz', 'GSE114802_org4_genes.tsv.gz')
download.file('https://ftp.ncbi.nlm.nih.gov/geo/series/GSE114nnn/GSE114802/suppl/GSE114802_org4_counts.csv.gz', 'GSE114802_org4_counts.csv.gz')
```

:::

:::


::: {.callout-question .icon .callout-note}

Read the barcodes, genes and counts files into R.

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
cells <- read_tsv('~/Share/GSE114802_org4_barcodes.tsv.gz', col_names = FALSE)
genes <- read_tsv('~/Share/GSE114802_org4_genes.tsv.gz', col_names = FALSE)
counts <- read_csv('~/Share/GSE114802_org4_counts.csv.gz', col_names = TRUE)
counts <- counts[, -1]
counts <- as(counts, 'matrix')
counts <- as(counts, 'dgCMatrix')
rownames(counts) <- genes$X1
```

:::

:::

::: {.callout-question .icon .callout-note}

Coerce the data into a `SingleCellExperiment` object.

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
sce <- SingleCellExperiment(
    colData = cells, 
    rowData = genes, 
    assays = list('counts' = counts)
)
```


:::

:::

::: {.callout-question .icon .callout-note}

Examine the `SingleCellExperiment` object you've just created. Get an idea of the size of the dataset, the different data available, etc.

::: {.callout-answer .icon .callout-note collapse=true}


```{r eval = TRUE, filename = "R"}
colData(sce)
rowData(sce)
metadata(sce)
dim(sce)
assays(sce)
counts(sce)[1:10, 1:10]
reducedDims(sce)
```

:::

:::

::: {.callout-question .icon .callout-note}

How much memory does the `SingleCellExperiment` object take up? (use `object.size()` to get the size of an object...). 

Can you compare it to the size of the counts matrix coerced to a dense matrix?

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
object.size(sce) 
object.size(as.matrix(counts(sce))) 
```

:::

:::

::: {.callout-question .icon .callout-note}

Compare these results to the sparsity of the counts (the % of the counts equal to 0). Comment.

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
sum(counts > 0) / (nrow(sce)*ncol(sce))
```

:::

:::


## Basic QCs 

You can learn a lot about your scRNA-seq data's quality with simple plotting.  
Let's do some plotting to look at the number of reads per cell, reads per genes, expressed genes per cell (often called complexity), and rarity of genes (cells expressing genes).

::: {.callout-question .icon .callout-note}

Plot the number of counts per cell, the number of expressed genes per cell, and the relationship between the two.

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
counts_per_cell <- Matrix::colSums(counts)
counts_per_gene <- Matrix::rowSums(counts)
genes_per_cell <- Matrix::colSums(counts > 0) # count gene only if it has non-zero reads mapped.
hist(log10(counts_per_cell+1), main = '# of counts per cell', col = 'wheat')
hist(log10(genes_per_cell+1), main = '# of expressed genes per cell', col = 'wheat')
plot(counts_per_cell, genes_per_cell, log = 'xy', col = 'wheat')
title('Counts vs genes per cell')
```

:::

:::

::: {.callout-question .icon .callout-note}

Look at the summary counts for genes and cells. Can you plot a histogram of counts per gene in log10 scale?

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
cells_per_gene <- Matrix::rowSums(counts > 0) # only count cells where the gene is expressed
hist(log10(cells_per_gene+1), main = '# of cells expressing each gene', col = 'wheat')
```

:::

:::

A very useful plot is the distribution of library complexity in the sequencing run, typically shown as a lineplot of the number of detected UMI per cell, with cells ranked in decreasing order.
One can use such plot to investigate observations (potential cells) that are actually failed libraries (lower end outliers) or observations that are cell doublets (higher end outliers).

::: {.callout-question .icon .callout-note}

Plot cells ranked by their number of detected genes. Comment.

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
plot(
    sort(genes_per_cell, decreasing = TRUE), 
    xlab = 'cell', log = 'y', main = '# of genes per cell (ordered)', 
    type = 'l'
)
```

:::

:::

::: {.callout-question .icon .callout-note}

Several QCs can be automatically computed using `quickPerCellQC()`. Try it out and check the results.

What are the `total` and `detected` columns?

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
sce <- scuttle::quickPerCellQC(sce)
colData(sce)
```

:::

:::


## Access to stored informations 

### Assay slots

For typical scRNA-seq experiments, a `SingleCellExperiment` can have multiple assays, corresponding to different metrics. The most basic one is `counts`.  
Different assays store different 'transformations' of the `counts`(e.g. `logcounts).

::: {.callout-question .icon .callout-note}

Try to manually compute logcounts from counts and store it in a new slot.

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
assay(sce, 'logcounts') <- log10(counts(sce) + 1)
logcounts(sce)[1:10, 1:10]
```

:::

:::

### Embeddings 

Embeddings allow for a representation of large-scale data (N cells x M genes) into smaller dimensions (e.g. 2-50 dimensions). 
Typical embeddings can be PCA, t-SNE, UMAP, etc... 
Many embeddings can be computed using `run...()` functions from Bioconductor packages (e.g. `scran`, `scater`, ...).

::: {.callout-question .icon .callout-note}


Try to compute PCA, t-SNE and UMAP embeddings of the dataset using `runPCA()`, `runTSNE()` and `runUMAP()` from `scater` package.

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
library(scater)

sce <- scater::runPCA(sce)
plotReducedDim(sce, "PCA")

sce <- scater::runTSNE(sce)
plotReducedDim(sce, "TSNE")

sce <- scater::runUMAP(sce)
plotReducedDim(sce, "UMAP", colour_by = 'sum')
plotReducedDim(sce, "UMAP", colour_by = 'detected')
```

:::

:::


### Multiple modalities

Alternative 'modalities' can be stored in the same `SingleCellExperiment` object (e.g. if you perform paired single-cell RNA-seq and ATAC-seq). 
This is done through `altExps` which can store summarized experiments. 

::: {.callout-question .icon .callout-note}

Try to add an altExp (using `altExp<-` function) and swap it with the `counts` assay.

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
altExp(sce, "ATAC_counts") <- SummarizedExperiment(matrix(rpois(1000, 5), ncol = ncol(sce)))
swapAltExp(sce, "ATAC_counts", saved = "RNA_counts")
```

:::

:::

Note that features can be different between different `altExps`.

## Filtering cells and features

### Pre-filtering

::: {.callout-question .icon .callout-note}

Filter the SCE to only include cells that have a complexity of 2000 genes or more and genes that are are expressed in 10 or more cells.

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"} 
sce_filtered <- sce[
    Matrix::rowSums(counts(sce) > 0) > 10, 
    Matrix::colSums(counts(sce) > 0) > 2000
]
sce_filtered
```
:::

:::

Almost all our analysis will be on this single object, of class SingleCellExperiment. 
This object contains various "slots" that will store not only the raw count data, but also the results from various computations below.
This has the advantage that we do not need to keep track of inidividual variables of interest - they can all be collapsed into a single object as long as these slots are pre-defined.

### Filtering low-quality cells: mitochondrial counts

For each cell, we can calculate the percentage of counts mapping on mitochondrial genes and store it in a column `percent_mito` in our `colData()`.

::: {.callout-question .icon .callout-note}

Find mitochondrial genes, compute the % of total counts associated with these genes, and store it in `colData`

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
rowData(sce_filtered)
mito_genes <- rownames(sce_filtered)[grep(pattern = "^MT-", x = rowData(sce_filtered)$X2)]
mito_genes_counts <- counts(sce_filtered)[mito_genes, ]
percent_mito <- colSums(mito_genes_counts) / sce_filtered$total
hist(percent_mito*100, main = '% of total counts over mitochondrial genes', col = 'wheat')
colData(sce_filtered)$percent_mito <- percent_mito
table(colData(sce_filtered)$percent_mito > 0.1)
```

:::

:::

::: {.callout-question .icon .callout-note}

Remove cells with a % of mitochondrial counts greater than 10%.

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
sce_filtered <- sce_filtered[
    , 
    sce_filtered$percent_mito <= 0.10
]
sce_filtered
```

:::

:::


### Checking housekeeping genes

Another metric we use is the number of house keeping genes expressed in a cell. 
These genes reflect commomn processes active in a cell and hence are a good global quality measure. 
They are also abundant and are usually steadliy expressed in cells, thus less sensitive to the high dropout.

::: {.callout-question .icon .callout-note}

Load the list of housekeeping genes (from `~/Share/tirosh_house_keeping.txt`), match them to the genes in the `rowData` of the `SingleCellExperiment` object (using `match` and `rownames`), remove `NA`s (genes not found in the `rowData`), and store the list of housekeeping genes in a new variable.

Then, calculate the number of expressed housekeeping genes per cell (genes with a count > 0) and store the number of expressed housekeeping genes per cell in `colData`.

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
# Load the list of housekeeping genes
hkgenes <- read.table("~/Share/tirosh_house_keeping.txt", skip = 2)
hkgenes <- as.vector(hkgenes$V1)
hkgenes <- rownames(sce_filtered)[match(hkgenes, rowData(sce_filtered)$X2)]
hkgenes <- hkgenes[!is.na(hkgenes)]
hkgenes

colData(sce_filtered)$n_expressed_hkgenes <- Matrix::colSums(counts(sce_filtered)[hkgenes, ] > 0)
table(colData(sce_filtered)$n_expressed_hkgenes)
```

:::

:::

::: {.callout-question .icon .callout-note}

Plot (in a boxplot) the relationship between the # of detected housekeeping genes and the total UMI count (or # of detected genes) per cell. Comment.

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
colData(sce_filtered)$n_expressed_hkgenes <- Matrix::colSums(counts(sce_filtered)[hkgenes, ] > 0)
boxplot(colData(sce_filtered)$total ~ colData(sce_filtered)$n_expressed_hkgenes)
boxplot(colData(sce_filtered)$detected ~ colData(sce_filtered)$n_expressed_hkgenes)
```

:::

:::


::: {.callout-question .icon .callout-note}

Remove cells with a # of expressed housekeeping genes greater than 85.

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
sce_filtered <- sce_filtered[, sce_filtered$n_expressed_hkgenes <= 85]
sce_filtered
```

:::

:::

### Checking gene set expression

Sometimes we want to ask what is the expression of a gene / a set of a genes across cells. 
This set of genes may make up a gene expression program we are interested in. 
Another benefit at looking at gene sets is it reduces the effects of drop outs.

Let's look at genes involved in the stress signature upon cell dissociation. 
We calculate these genes average expression levels on the single cell level.

```{r eval=TRUE, filename = "R"}
genes_dissoc <- c("ATF3", "BTG2", "CEBPB", "CEBPD", "CXCL3", "CXCL2", "CXCL1", "DNAJA1", "DNAJB1", "DUSP1", "EGR1", "FOS", "FOSB", "HSP90AA1", "HSP90AB1", "HSPA1A", "HSPA1B", "HSPA1A", "HSPA1B", "HSPA8", "HSPB1", "HSPE1", "HSPH1", "ID3", "IER2", "JUN", "JUNB", "JUND", "MT1X", "NFKBIA", "NR4A1", "PPP1R15A", "SOCS3", "ZFP36")
genes_dissoc <- rownames(sce_filtered)[match(genes_dissoc, rowData(sce_filtered)$X2)]
genes_dissoc <- unique(genes_dissoc[!is.na(genes_dissoc)])
```

::: {.callout-question .icon .callout-note}

Calculate the average gene set expression for each cell.

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
ave_expr_genes_dissoc <- colMeans(logcounts(sce_filtered[genes_dissoc, ]))
colData(sce_filtered)$ave_expr_genes_dissoc <- ave_expr_genes_dissoc
```

:::

:::


::: {.callout-question .icon .callout-note}

Plot an embedding of the dataset, using a color scale representing the average expression of genes involved in the stress signature upon cell dissociation. Comment.

::: {.callout-answer .icon .callout-note collapse=true}

```{r eval=TRUE, filename = "R"}
plotReducedDim(sce_filtered, dimred = 'PCA', colour_by = 'ave_expr_genes_dissoc')
```

:::

:::

## Session info 

```{r echo = FALSE, eval = TRUE}
devtools::session_info()
```
