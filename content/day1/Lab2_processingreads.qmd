---
engine: knitr
---

# Lab 2: From .bcl to count matrix

::: {.callout-note icon='true'}

## Notes

The estimated time for this lab is around 1 hour.

:::

::: {.callout-tip icon='true'}

## Aims

- Learn how to demultiplex sequencing data using `cellranger mkfastq`.
- Learn how to generate gene count matrices using `cellranger count`.

:::

## Demultiplexing sequencing data with `cellranger mkfastq`

Navigate to your terminal in `RStudio` on AWS.

Go to the [cellranger mkfastq page](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/using/mkfastq) and read the **Overview**.

For this workshop, we are going to look at a toi dataset provided by 10x Genomics. The dataset is `cellranger-tiny-bcl-1.2.0`, provided in the `~/Share/` folder. 

::: {.callout-question .icon .callout-note}

Go to the Terminal tab in your `RStudio` and take a look at the 10x samplesheet `.csv` file 

::: {.callout-answer .icon .callout-note collapse=true}

```{sh eval=TRUE, filename="bash"}
cat ~/Share/data_wrangling/cellranger-tiny-bcl-simple-1.2.0.csv
```

:::

:::

::: {.callout-question .icon .callout-note}

Next, explore the contents of the sequencing directory:

::: {.callout-answer .icon .callout-note collapse=true}

```{sh eval=TRUE, filename="bash"}
ls -l ~/Share/data_wrangling/cellranger-tiny-bcl-1.2.0
```

:::


:::

::: {.callout-question .icon .callout-note}

Now we can demultiplex our bcl files by running the following command in the terminal. Use 
`cellranger mkfastq` to demultiplex the sequencing data.

::: {.callout-answer .icon .callout-note collapse=true}

```{sh eval=FALSE, filename="bash"}
cellranger mkfastq --id tiny-bcl --run ~/Share/data_wrangling/cellranger-tiny-bcl-1.2.0 --csv ~/Share/data_wrangling/cellranger-tiny-bcl-simple-1.2.0.csv
```

```{code}
/opt/cellranger/bin
cellranger mkfastq (cellranger-5.0.1)
Copyright (c) 2020 10x Genomics, Inc.  All rights reserved.
-------------------------------------------------------------------------------

Martian Runtime - v4.0.2
Serving UI at http://alcide:36825?auth=0r06HTBMZxdlUuIo9SDR6HlYjSyn7ohyqq9S6lsPlYA

Running preflight checks (please wait)...
Checking run folder...
Checking RunInfo.xml...
Checking system environment...
Emitting run information...
Checking read specification...
Checking samplesheet specs...
2024-10-29 11:42:56 [runtime] (ready)           ID.tiny-bcl.MAKE_FASTQS_CS.MAKE_FASTQS.PREPARE_SAMPLESHEET
2024-10-29 11:42:56 [runtime] (run:local)       ID.tiny-bcl.MAKE_FASTQS_CS.MAKE_FASTQS.PREPARE_SAMPLESHEET.fork0.chnk0.main
...
2024-10-29 11:43:00 [runtime] (split_complete)  ID.tiny-bcl.MAKE_FASTQS_CS.MAKE_FASTQS.MERGE_FASTQS_BY_LANE_SAMPLE
2024-10-29 11:43:00 [runtime] (run:local)       ID.tiny-bcl.MAKE_FASTQS_CS.MAKE_FASTQS.MERGE_FASTQS_BY_LANE_SAMPLE.fork0.chnk0.main
2024-10-29 11:43:00 [runtime] (chunks_complete) ID.tiny-bcl.MAKE_FASTQS_CS.MAKE_FASTQS.MERGE_FASTQS_BY_LANE_SAMPLE
2024-10-29 11:43:00 [runtime] (run:local)       ID.tiny-bcl.MAKE_FASTQS_CS.MAKE_FASTQS.MERGE_FASTQS_BY_LANE_SAMPLE.fork0.join
2024-10-29 11:43:00 [runtime] (join_complete)   ID.tiny-bcl.MAKE_FASTQS_CS.MAKE_FASTQS.MERGE_FASTQS_BY_LANE_SAMPLE

Outputs:
- Run QC metrics:        null
- FASTQ output folder:   /home/rsg/tiny-bcl/outs/fastq_path
- Interop output folder: /home/rsg/tiny-bcl/outs/interop_path
- Input samplesheet:     /home/rsg/tiny-bcl/outs/input_samplesheet.csv

Waiting 6 seconds for UI to do final refresh.
Pipestance completed successfully!

2024-10-29 11:43:06 Shutting down.
Saving pipestance info to "tiny-bcl/tiny-bcl.mri.tgz"
```

:::

:::

The output folders can be viewed by running the `ls` command:

::: {.callout-question .icon .callout-note}

Inspect the output folder generated by `cellranger mkfastq`.

::: {.callout-answer .icon .callout-note collapse=true}

```{sh eval=TRUE, filename="bash"}
ls -l ~/tiny-bcl/outs/fastq_path/H35KCBCXY/test_sample
```

:::


:::

::: {.callout-question .icon .callout-note}

Look at the first reads listed in index read (`I1`), read 1 (`R1`), and read (`R2`) files. 

What is the purpose of the index read? What does it contain? 

::: {.callout-answer .icon .callout-note collapse=true}

```{sh eval=FALSE, filename="bash"}
gzcat tiny-bcl/outs/fastq_path/H35KCBCXY/test_sample/test_sample_S1_L001_I1_001.fastq.gz | head -n 12
```

:::

:::


Open the html file `tiny-bcl/outs/fastq_path/Reports/html/index.html` by navigating to the file in RStudio, using the Files Tab. When you click on the file, select the option to View in Web Browser. Take some time to explore the demultiplexed outputs.

## Generating gene count matrices with `cellranger count`

Go to the [cellranger count algorithm overview](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/algorithms/overview) and read the section on **Alignment** (Read Trimming, Genome Alignment, MAPQ adjustment, Transcriptome Alignment, UMI Counting).

::: {.callout-question .icon .callout-note}

Generate a gene count matrix for the `test_sample` reads using `cellranger count` and the transcriptome reference provided in `~/Share/refdata-gex-mm10-2020-A/`

::: {.callout-answer .icon .callout-note collapse=true}

```{sh eval=FALSE, filename="bash"}
cellranger count --id counts --transcriptome ~/Share/refdata-gex-mm10-2020-A/ --fastqs tiny-bcl/outs/fastq_path/H35KCBCXY/test_sample --sample test_sample
```

```{code}
Martian Runtime - v4.0.2
Serving UI at http://alcide:35163?auth=IERAjMung3pm8corwsthsKjEue66fJwPDK0-5l-CLCo

Running preflight checks (please wait)...

Checking sample info...
Checking FASTQ folder...
Checking reference...
Checking reference_path (~/Share/refdata-gex-mm10-2020-A) on alcide...
Checking chemistry...
Checking optional arguments...

mrc: v4.0.2

mrp: v4.0.2

Anaconda: 
numpy: 1.15.4

scipy: 1.1.0

pysam: 0.16.0.1

h5py: 2.8.0

pandas: 0.24.2

STAR: 2.7.2a

samtools: samtools 1.10
Using htslib 1.10.2
Copyright (C) 2019 Genome Research Ltd.

2024-10-29 17:18:47 [runtime] (ready)           ID.counts.SC_RNA_COUNTER_CS.SC_MULTI_CORE.MAKE_FULL_CONFIG._MAKE_VDJ_CONFIG
2024-10-29 17:18:47 [runtime] (run:local)       ID.counts.SC_RNA_COUNTER_CS.SC_MULTI_CORE.MAKE_FULL_CONFIG._MAKE_VDJ_CONFIG.fork0.chnk0.main
2024-10-29 17:18:47 [runtime] (ready)           ID.counts.SC_RNA_COUNTER_CS.FULL_COUNT_INPUTS.WRITE_GENE_INDEX

...
...
...

2024-10-29 17:25:30 [runtime] (run:local)       ID.counts.SC_RNA_COUNTER_CS.SC_MULTI_CORE.MULTI_REPORTER.CLOUPE_PREPROCESS.fork0.chnk0.main
2024-10-29 17:25:32 [runtime] (chunks_complete) ID.counts.SC_RNA_COUNTER_CS.SC_MULTI_CORE.MULTI_REPORTER.CLOUPE_PREPROCESS
2024-10-29 17:25:32 [runtime] (run:local)       ID.counts.SC_RNA_COUNTER_CS.SC_MULTI_CORE.MULTI_REPORTER.CLOUPE_PREPROCESS.fork0.join
2024-10-29 17:25:33 [runtime] (join_complete)   ID.counts.SC_RNA_COUNTER_CS.SC_MULTI_CORE.MULTI_REPORTER.CLOUPE_PREPROCESS

Outputs:
- Run summary HTML:                         /home/rsg/counts/outs/web_summary.html
- Run summary CSV:                          /home/rsg/counts/outs/metrics_summary.csv
- BAM:                                      /home/rsg/counts/outs/possorted_genome_bam.bam
- BAM index:                                /home/rsg/counts/outs/possorted_genome_bam.bam.bai
- Filtered feature-barcode matrices MEX:    /home/rsg/counts/outs/filtered_feature_bc_matrix
- Filtered feature-barcode matrices HDF5:   /home/rsg/counts/outs/filtered_feature_bc_matrix.h5
- Unfiltered feature-barcode matrices MEX:  /home/rsg/counts/outs/raw_feature_bc_matrix
- Unfiltered feature-barcode matrices HDF5: /home/rsg/counts/outs/raw_feature_bc_matrix.h5
- Secondary analysis output CSV:            /home/rsg/counts/outs/analysis
- Per-molecule read information:            /home/rsg/counts/outs/molecule_info.h5
- CRISPR-specific analysis:                 null
- Loupe Browser file:                       /home/rsg/counts/outs/cloupe.cloupe
- Feature Reference:                        null
- Target Panel File:                        null

Waiting 6 seconds for UI to do final refresh.
Pipestance completed successfully!

2024-10-29 17:25:39 Shutting down.
```

:::

:::


While the count command is running, read about the [format of the feature-barcode matrices](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/output/matrices).

Once the count command is finished running, the pipeline outputs can be viewed with `ls`:

```{sh eval=TRUE, filename="bash"}
ls -l ~/counts/outs
```

Can you locate the feature-barcode matrices? What is the difference between the `raw_feature_bc_matrix` and `filtered_feature_bc_matrix` data types?

Now open the html file `counts/outs/web_summary.html` by navigating to the file in RStudio, using the Files Tab. When you click on the file, select the option to View in Web Browser. Take some time to explore the gene expression matrix outputs.
